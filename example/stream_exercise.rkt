#lang sicp

(define (stream-car s)
  (car s))
(define (stream-cdr s)
  (force (cdr s)))
(define (cons-stream a b)
  (cons a (delay b)))
;(define (delay x)
;  (lambda ()
;    x))
(define (force delayed-object)
  (delayed-object))
(define (memo-proc proc)
  (let ((already-run? false) (result false))
    (lambda ()
      (if (not already-run?)
          (begin (set! result (proc))
                 (set! already-run? true)
                 result)
          result))))
(define (delay x)
  (memo-proc (lambda () x)))
(define a (cons 1 (lambda () 3)))
a
(cdr a)
(force (cdr a))